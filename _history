{"entries":[{"timestamp":1729208478637,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":75},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  Set the LED brightness to 64 (out of 255) to save energy\nled.setBrightness(64)\n//  Initialize reading variable to store moisture sensor value\nlet reading = 0\n//  Run the function continuously\nbasic.forever(function on_forever() {\n    \n    //  Turn on power to the sensor by setting P1 to high\n    pins.digitalWritePin(DigitalPin.P1, 1)\n    //  Wait for 1 millisecond to let the sensor stabilize\n    basic.pause(1)\n    //  Read the analog value from the moisture sensor on pin P0\n    reading = pins.analogReadPin(AnalogPin.P0)\n    //  Turn off power to the sensor to save energy\n    pins.digitalWritePin(DigitalPin.P1, 0)\n    //  Display the moisture reading as a bar graph on the LED matrix\n    //  The maximum value is set to 1023 (10-bit ADC resolution)\n    led.plotBarGraph(reading, 1023)\n    //  If button A is pressed, display the numeric reading\n    if (input.buttonIsPressed(Button.A)) {\n        basic.showNumber(reading)\n    }\n    \n    //  Wait for 5 seconds (5000 milliseconds) before the next reading\n    //  This helps conserve energy\n    basic.pause(5000)\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1075,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":232,"start2":232,"length1":64,"length2":44}]},{"type":"added","filename":"main.py","value":"# Set the LED brightness to 64 (out of 255) to save energy\nled.set_brightness(64)\n\n# Initialize reading variable to store moisture sensor value\nreading = 0\n\ndef on_forever():\n    global reading\n    \n    # Turn on power to the sensor by setting P1 to high\n    pins.digital_write_pin(DigitalPin.P1, 1)\n    \n    # Wait for 1 millisecond to let the sensor stabilize\n    basic.pause(1)\n    \n    # Read the analog value from the moisture sensor on pin P0\n    reading = pins.analog_read_pin(AnalogPin.P0)\n    \n    # Turn off power to the sensor to save energy\n    pins.digital_write_pin(DigitalPin.P1, 0)\n    \n    # Display the moisture reading as a bar graph on the LED matrix\n    # The maximum value is set to 1023 (10-bit ADC resolution)\n    led.plot_bar_graph(reading, 1023)\n    \n    # If button A is pressed, display the numeric reading\n    if input.button_is_pressed(Button.A):\n        basic.show_number(reading)\n    \n    # Wait for 5 seconds (5000 milliseconds) before the next reading\n    # This helps conserve energy\n    basic.pause(5000)\n\n# Run the function continuously\nbasic.forever(on_forever)"}]},{"timestamp":1729209062677,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":65}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   \n"],[-1,"    //  Treat as a global variable\n"],[0,"    "]],"start1":235,"start2":235,"length1":43,"length2":8},{"diffs":[[0," for 1 m"],[-1,"s"],[1,"illisecond"],[0," to let "]],"start1":352,"start2":352,"length1":17,"length2":26},{"diffs":[[0," seconds"],[1," (5000 milliseconds)"],[0," before "]],"start1":962,"start2":962,"length1":16,"length2":36}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":259,"start2":259,"length1":52,"length2":8}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"ding"],[-1,"  # Treat as a global variable"],[0,"\n   "]],"start1":189,"start2":189,"length1":38,"length2":8},{"diffs":[[0," for 1 m"],[-1,"s"],[1,"illisecond"],[0," to let "]],"start1":315,"start2":315,"length1":17,"length2":26},{"diffs":[[0," seconds"],[1," (5000 milliseconds)"],[0," before "]],"start1":933,"start2":933,"length1":16,"length2":36}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1729208478636,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Soil Moisture Project\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1729209326212}